// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -module-name ReadyRemitSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
import Combine
import CommonCrypto
import DeveloperToolsSupport
import Foundation
import PDFKit
@_exported import ReadyRemitSDK
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIApplication : @retroactive UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc public enum RSP : Swift.Int, Swift.Sendable {
  case VISA, MASTERCARD, MONEYGRAM, CONVERA
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}

extension ReadyRemitSDK.RRMConfiguration {
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, closeAfterInactivityTime: Swift.Double)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, closeAfterInactivityTime: Swift.Double)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, closeAfterInactivityTime: Swift.Double)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, closeAfterInactivityTime: Swift.Double)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, closeAfterInactivityTime: Swift.Double, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, closeAfterInactivityTime: Swift.Double, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, closeAfterInactivityTime: Swift.Double, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, closeAfterInactivityTime: Swift.Double, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, closeAfterInactivityTime: Swift.Double, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, closeAfterInactivityTime: Swift.Double, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, closeAfterInactivityTime: Swift.Double, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
  @objc convenience dynamic public init(environment: ReadyRemitSDK.ReadyRemitEnvironment, language: ReadyRemitSDK.RRMLocale, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats, appearance: ReadyRemitSDK.ReadyRemitAppearance, homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod, closeAfterInactivityTime: Swift.Double, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck, onLaunch: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void)
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
final public class Reachability : Swift.Sendable {
  public typealias NetworkReachable = (ReadyRemitSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (ReadyRemitSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: ReadyRemitSDK.Reachability.NetworkStatus, b: ReadyRemitSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    nonisolated(unsafe) public static let none: ReadyRemitSDK.Reachability.Connection
    public static func == (a: ReadyRemitSDK.Reachability.Connection, b: ReadyRemitSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  nonisolated(unsafe) final public var whenReachable: ReadyRemitSDK.Reachability.NetworkReachable?
  nonisolated(unsafe) final public var whenUnreachable: ReadyRemitSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  nonisolated(unsafe) final public var allowsCellularConnection: Swift.Bool
  nonisolated(unsafe) final public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  final public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  final public var currentReachabilityStatus: ReadyRemitSDK.Reachability.Connection {
    get
  }
  final public var connection: ReadyRemitSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension ReadyRemitSDK.Reachability {
  final public func startNotifier() throws
  final public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  final public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  final public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  final public var isReachableViaWiFi: Swift.Bool {
    get
  }
  final public var description: Swift.String {
    get
  }
}
@objc public enum ReadyRemitEnvironment : Swift.Int, Swift.Sendable {
  case production, sandbox
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor final public class ReadyRemit : ObjectiveC.NSObject, Swift.Sendable {
  @objc @_Concurrency.MainActor public static let shared: ReadyRemitSDK.ReadyRemit
  @objc @_Concurrency.MainActor final public var environment: ReadyRemitSDK.ReadyRemitEnvironment {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor final public var appearance: ReadyRemitSDK.ReadyRemitAppearance {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor final public func startSDK(delegate: any ReadyRemitSDK.ReadyRemitDelegate, configuration: ReadyRemitSDK.RRMConfiguration = .init(), onLoad: @escaping (SwiftUICore.AnyView) -> Swift.Void)
  @objc @_Concurrency.MainActor final public func launchSDK(in navigation: UIKit.UINavigationController, delegate: any ReadyRemitSDK.ReadyRemitDelegate, configuration: ReadyRemitSDK.RRMConfiguration = .init())
  @_Concurrency.MainActor final public func showTransfer(transferId: Swift.String, delegate: any ReadyRemitSDK.ReadyRemitDelegate, configuration: ReadyRemitSDK.RRMConfiguration = .init(), onLoad: @escaping (SwiftUICore.AnyView) -> Swift.Void)
  @objc @_Concurrency.MainActor final public func showTransfer(in navigation: UIKit.UINavigationController, transferId: Swift.String, delegate: any ReadyRemitSDK.ReadyRemitDelegate, configuration: ReadyRemitSDK.RRMConfiguration = .init())
  @objc @_Concurrency.MainActor final public func close()
  @available(*, deprecated, message: "Use startSDK(delegate: _, configuration:_, onLoad: _) instead")
  @_Concurrency.MainActor final public func launch(inNavigation: UIKit.UINavigationController, delegate: any ReadyRemitSDK.ReadyRemitDelegate, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)? = nil, rsp: ReadyRemitSDK.RSP? = nil, singleMethod: ReadyRemitSDK.TransferMethod? = nil)
  @available(*, deprecated, message: "Use startSDK(delegate: _, configuration:_, onLoad: _) instead")
  @_Concurrency.MainActor final public func launch(onLoad: @escaping (SwiftUICore.AnyView) -> Swift.Void, delegate: any ReadyRemitSDK.ReadyRemitDelegate, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)? = nil, rsp: ReadyRemitSDK.RSP? = nil, singleMethod: ReadyRemitSDK.TransferMethod? = nil)
  @available(*, deprecated, message: "Use launchSDK(in: _, delegate: _, configuration: _) instead")
  @available(*, deprecated)
  @objc @_Concurrency.MainActor final public func launchObjc(inNavigation: UIKit.UINavigationController, delegate: any ReadyRemitSDK.ReadyRemitDelegate, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)? = nil, rsp: ReadyRemitSDK.RSP, singleMethod: ReadyRemitSDK.TransferMethod)
  @available(*, deprecated, message: "Use launchSDK(in: _, delegate: _, configuration: _) instead")
  @objc @_Concurrency.MainActor final public func launchObjc(inNavigation: UIKit.UINavigationController, delegate: any ReadyRemitSDK.ReadyRemitDelegate, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)?)
  @available(*, deprecated, message: "Use startSDK(delegate: _, configuration:_, onLoad: _) instead and se the timeout on the configuration")
  @objc @_Concurrency.MainActor final public func close(afterSeconds time: Swift.Double, onExpireDo: @escaping () -> Swift.Void = { })
  @available(*, deprecated, message: "Use showTransfer(transferId: _, delegate: _, configuration: _, onLoad: _) instead")
  @_Concurrency.MainActor final public func launchTransferDetails(inNavigation: UIKit.UINavigationController, delegate: any ReadyRemitSDK.ReadyRemitDelegate, transferId: Swift.String, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)?)
  @available(*, deprecated, message: "Use showTransfer(in: _, transferId: _, delegate: _, configuration: _) instead")
  @objc @_Concurrency.MainActor final public func launchTransferDetailsObjc(inNavigation: UIKit.UINavigationController, delegate: any ReadyRemitSDK.ReadyRemitDelegate, transferId: Swift.String, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)?)
  @available(*, deprecated, message: "Use startSDK(delegate: _, configuration:_, onLoad: _) instead, and provide language on configuration")
  @objc @_Concurrency.MainActor final public func languageSelected(_ lang: Swift.String)
  @available(*, deprecated, message: "Use startSDK(delegate: _, configuration:_, onLoad: _) instead and provide the date format on configuration")
  @objc @_Concurrency.MainActor final public func dateFormatSelected(_ format: Swift.String)
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
@objc final public class RRMConfiguration : ObjectiveC.NSObject {
  final public var environment: ReadyRemitSDK.ReadyRemitEnvironment
  final public var language: ReadyRemitSDK.RRMLocale?
  final public var dateFormat: ReadyRemitSDK.ReadyRemitDateFormats
  final public var appearance: ReadyRemitSDK.ReadyRemitAppearance
  final public var homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts
  final public var rsp: ReadyRemitSDK.RSP?
  final public var singleMethod: ReadyRemitSDK.TransferMethod?
  final public var closeAfterInactivityTime: Swift.Double?
  final public var balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck?
  final public var onLaunch: (() -> Swift.Void)?
  final public var onDismiss: (() -> Swift.Void)?
  public init(environment: ReadyRemitSDK.ReadyRemitEnvironment = .production, language: ReadyRemitSDK.RRMLocale? = nil, dateFormat: ReadyRemitSDK.ReadyRemitDateFormats = .locale, appearance: ReadyRemitSDK.ReadyRemitAppearance = .init(), homeScreenTexts: ReadyRemitSDK.ReadyRemitHomeScreenTexts = .init(), rsp: ReadyRemitSDK.RSP? = nil, singleMethod: ReadyRemitSDK.TransferMethod? = nil, closeAfterInactivityTime: Swift.Double? = nil, balanceCheck: ReadyRemitSDK.RRMConfiguration.BalanceCheck? = nil, onLaunch: (() -> Swift.Void)? = nil, onDismiss: (() -> Swift.Void)? = nil)
  @objc final public class BalanceCheck : ObjectiveC.NSObject, @unchecked Swift.Sendable {
    final public var alias: Swift.String
    final public var last4: Swift.String
    final public var balance: Swift.Double
    final public var externalId: Swift.String
    @objc public init(alias: Swift.String, last4: Swift.String, balance: Swift.Double, externalId: Swift.String)
    @objc deinit
  }
  @objc deinit
}
@objc public enum RRMLocale : Swift.Int, Swift.CaseIterable, Swift.Sendable {
  case enUS
  case esMX
  public var short: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ReadyRemitSDK.RRMLocale]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [ReadyRemitSDK.RRMLocale] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}

extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
}
@objc public class ReadyRemitObjcOAuthToken : ObjectiveC.NSObject, Swift.Decodable {
  @objc public init(tokenType: Swift.String, accessToken: Swift.String, expiresInSeconds: Swift.Int)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}

@objc public enum TransferMethod : Swift.Int, Swift.Sendable {
  case BANK_ACCOUNT
  case CASH_PICKUP
  case PUSH_TO_CARD
  case MOBILE_WALLET
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}



public struct RRMDynamicColor : Swift.Sendable {
  public init(light: SwiftUICore.Color, dark: SwiftUICore.Color)
  public init(light: UIKit.UIColor, dark: UIKit.UIColor)
  public init(light: Swift.String, dark: Swift.String)
}
final public class ReadyRemitColorScheme : Swift.Sendable {
  public init()
  nonisolated(unsafe) final public var background: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var foreground: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var danger: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var dangerLight: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var success: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var divider: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var inputLine: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var icon: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var text: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var textSecondary: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var buttonText: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var buttonColor: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var primary: ReadyRemitSDK.RRMDynamicColor
  nonisolated(unsafe) final public var primaryLight: ReadyRemitSDK.RRMDynamicColor
  @objc deinit
}
@objc public protocol ReadyRemitDelegate {
  @objc func onAuthTokenRequest(success: @escaping (Swift.String) -> Swift.Void, failure: @escaping () -> Swift.Void)
  @objc func onSubmitTransfer(transferRequest: ReadyRemitSDK.ReadyRemit.TransferRequest, success: @escaping (Swift.String) -> Swift.Void, failure: @escaping (Swift.String, Swift.String) -> Swift.Void)
  @objc optional func onSDKClose()
}

extension ReadyRemitSDK.ReadyRemit {
  @objc final public class TransferRequest : ObjectiveC.NSObject, Swift.Encodable, Swift.Sendable {
    @objc final public let dstCountryIso3Code: Swift.String
    @objc final public let dstCurrencyIso3Code: Swift.String
    @objc final public let srcCurrencyIso3Code: Swift.String
    @objc final public let transferMethod: Swift.String
    @objc final public let quoteBy: Swift.String
    @objc final public let amount: Swift.Int
    @objc final public let fee: Swift.Int
    @objc final public let recipientId: Swift.String
    @objc final public let recipientAccountId: Swift.String?
    @objc final public let fields: [ReadyRemitSDK.ReadyRemit.RequestField]?
    @objc final public let quoteHistoryId: Swift.String?
    @objc final public let sourceAccountId: Swift.String?
    @objc public init(dstCountryIso3Code: Swift.String, dstCurrencyIso3Code: Swift.String, srcCurrencyIso3Code: Swift.String, transferMethod: Swift.String, quoteBy: Swift.String, amount: Swift.Int, fee: Swift.Int, recipientId: Swift.String, recipientAccountId: Swift.String?, fields: [ReadyRemitSDK.ReadyRemit.RequestField]?, quoteHistoryId: Swift.String, sourceAccountId: Swift.String? = nil)
    @objc final public func toJSON() -> Swift.String?
    @objc deinit
    final public func encode(to encoder: any Swift.Encoder) throws
  }
  @objc public class RequestField : ObjectiveC.NSObject, Swift.Codable, @unchecked Swift.Sendable {
    @objc final public let id: Swift.String
    @objc final public let name: Swift.String
    @objc final public let type: Swift.String
    @objc final public let value: Swift.String
    @objc final public let displayText: Swift.String
    @objc public init(id: Swift.String, name: Swift.String, type: Swift.String, value: Swift.String, displayText: Swift.String)
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
infix operator || : LogicalDisjunctionPrecedence

@objc public enum ReadyRemitDateFormats : Swift.Int, Swift.Sendable {
  case yearMonthDay
  case dayMonthYear
  case monthDayYear
  case fullDate
  case locale
  public var format: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}

extension UIKit.UIFont {
  public static func registerSFFont(withFilenameString filenameString: Swift.String)
}

@_inheritsConvenienceInitializers @objc final public class ReadyRemitAppearance : ObjectiveC.NSObject, Swift.Sendable {
  public init(colors: ReadyRemitSDK.ReadyRemitColorScheme)
  @objc public init(styles: Foundation.NSDictionary)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class ReadyRemitHomeScreenTexts : ObjectiveC.NSObject, Swift.Sendable {
  final public let title: ReadyRemitSDK.ReadyRemitHomeTitle?
  final public let subtitle: ReadyRemitSDK.ReadyRemitHomeSubtitle?
  public init(title: ReadyRemitSDK.ReadyRemitHomeTitle? = nil, subtitle: ReadyRemitSDK.ReadyRemitHomeSubtitle? = nil)
  @objc deinit
}
@objc public enum ReadyRemitHomeTitle : Swift.Int, Swift.CaseIterable, Swift.Sendable {
  case internationalAndDomestic
  case internationalTransfer
  case sendMoneyInternationally
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ReadyRemitSDK.ReadyRemitHomeTitle]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [ReadyRemitSDK.ReadyRemitHomeTitle] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ReadyRemitHomeSubtitle : Swift.Int, Swift.CaseIterable, Swift.Sendable {
  case convenienceAndFlexibility
  case friendsAndFamilyAbroad
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ReadyRemitSDK.ReadyRemitHomeSubtitle]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [ReadyRemitSDK.ReadyRemitHomeSubtitle] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ReadyRemitTextHelper : ObjectiveC.NSObject {
  @objc public static func homeTitleText(for title: ReadyRemitSDK.ReadyRemitHomeTitle) -> Swift.String
  @objc public static func homeSubtitleText(for subtitle: ReadyRemitSDK.ReadyRemitHomeSubtitle) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension ReadyRemitSDK.RSP : Swift.Equatable {}
extension ReadyRemitSDK.RSP : Swift.Hashable {}
extension ReadyRemitSDK.RSP : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension ReadyRemitSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension ReadyRemitSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension ReadyRemitSDK.Reachability.Connection : Swift.Equatable {}
extension ReadyRemitSDK.Reachability.Connection : Swift.Hashable {}
extension ReadyRemitSDK.ReadyRemitEnvironment : Swift.Equatable {}
extension ReadyRemitSDK.ReadyRemitEnvironment : Swift.Hashable {}
extension ReadyRemitSDK.ReadyRemitEnvironment : Swift.RawRepresentable {}
extension ReadyRemitSDK.RRMLocale : Swift.Equatable {}
extension ReadyRemitSDK.RRMLocale : Swift.Hashable {}
extension ReadyRemitSDK.RRMLocale : Swift.RawRepresentable {}
extension ReadyRemitSDK.TransferMethod : Swift.Equatable {}
extension ReadyRemitSDK.TransferMethod : Swift.Hashable {}
extension ReadyRemitSDK.TransferMethod : Swift.RawRepresentable {}
extension ReadyRemitSDK.ReadyRemitDateFormats : Swift.Equatable {}
extension ReadyRemitSDK.ReadyRemitDateFormats : Swift.Hashable {}
extension ReadyRemitSDK.ReadyRemitDateFormats : Swift.RawRepresentable {}
extension ReadyRemitSDK.ReadyRemitHomeTitle : Swift.Equatable {}
extension ReadyRemitSDK.ReadyRemitHomeTitle : Swift.Hashable {}
extension ReadyRemitSDK.ReadyRemitHomeTitle : Swift.RawRepresentable {}
extension ReadyRemitSDK.ReadyRemitHomeSubtitle : Swift.Equatable {}
extension ReadyRemitSDK.ReadyRemitHomeSubtitle : Swift.Hashable {}
extension ReadyRemitSDK.ReadyRemitHomeSubtitle : Swift.RawRepresentable {}
