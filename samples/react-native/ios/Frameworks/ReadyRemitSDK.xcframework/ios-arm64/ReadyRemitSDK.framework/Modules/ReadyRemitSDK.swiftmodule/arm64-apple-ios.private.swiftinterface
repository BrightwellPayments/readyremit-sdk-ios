// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ReadyRemitSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AcuantCamera
import AcuantCommon
import AcuantFaceCapture
import AcuantImagePreparation
import AcuantPassiveLiveness
import Combine
import Foundation
import Network
@_exported import ReadyRemitSDK
import ScanForensicsPlus
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
extension UIKit.UIFont {
  public static func registerSFFont(withFilenameString filenameString: Swift.String)
}
extension Swift.Collection where Self.Element : Swift.StringProtocol {
  public func without(_ index: Swift.Int) -> Swift.String
}
@objc public enum ReadyRemitEnvironment : Swift.Int {
  case production, sandbox
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ReadyRemit : ObjectiveC.NSObject {
  @objc public static let shared: ReadyRemitSDK.ReadyRemit
  @objc public var appearance: ReadyRemitSDK.ReadyRemitAppearance
  @objc public var environment: ReadyRemitSDK.ReadyRemitEnvironment
  public func launch(inNavigation: UIKit.UINavigationController, delegate: ReadyRemitSDK.ReadyRemitDelegate, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)? = nil)
  public func launchEntrySwiftUi(authToken: Swift.String, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)?) -> SwiftUI.AnyView
  @objc public func launchObjc(inNavigation: UIKit.UINavigationController, delegate: ReadyRemitSDK.ReadyRemitDelegate, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)? = nil)
  @objc public func languageSelected(_ lang: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.Date {
  public static func getFormattedDate(string: Swift.String, formatter: Swift.String, currentFormat: Swift.String) -> Swift.String
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
  convenience public init(lightHex: Swift.String, darkHex: Swift.String)
}
public typealias Headers = [Swift.String : Swift.String]
@objc public class ReadyRemitObjcOAuthToken : ObjectiveC.NSObject, Swift.Decodable {
  @objc public init(tokenType: Swift.String, accessToken: Swift.String, expiresInSeconds: Swift.Int)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class ReadyRemitFontScheme : ObjectiveC.NSObject {
  @objc public static var defaultFamily: Swift.String
  @objc public static var dynamicFontsize: Swift.Bool
  public init(family: Swift.String? = nil, size: CoreFoundation.CGFloat? = nil, weight: UIKit.UIFont.Weight? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ReadyRemitColorScheme : ObjectiveC.NSObject {
  @objc public var primaryShade1: UIKit.UIColor
  @objc public var secondaryShade1: UIKit.UIColor
  @objc public var textPrimaryShade1: UIKit.UIColor
  @objc public var textPrimaryShade2: UIKit.UIColor
  @objc public var textPrimaryShade3: UIKit.UIColor
  @objc public var textPrimaryShade4: UIKit.UIColor
  @objc public var backgroundColorPrimary: UIKit.UIColor
  @objc public var backgroundColorSecondary: UIKit.UIColor
  @objc public var success: UIKit.UIColor
  @objc public var error: UIKit.UIColor
  @objc public var controlShade1: UIKit.UIColor
  @objc public var controlAccessoryShade1: UIKit.UIColor
  @objc public var primaryShade2: UIKit.UIColor
  @objc public var secondaryShade2: UIKit.UIColor
  @objc public var secondaryShade3: UIKit.UIColor
  @objc public var textPrimaryShade5: UIKit.UIColor
  @objc public var backgroundColorTertiary: UIKit.UIColor
  public var errorBackground: UIKit.UIColor
  @objc public var controlShade2: UIKit.UIColor
  @objc public var controlAccessoryShade2: UIKit.UIColor
  @objc public var textPrimaryDisabled: UIKit.UIColor
  @objc public var textTertiaryDisabled: UIKit.UIColor
  @objc public var textQuaternaryDisabled: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ReadyRemitDelegate {
  @objc func onAuthTokenRequest(success: @escaping (Swift.String) -> Swift.Void, failure: @escaping () -> Swift.Void)
  @objc func onSubmitTransfer(transferRequest: ReadyRemitSDK.ReadyRemit.TransferRequest, success: @escaping (Swift.String) -> Swift.Void, failure: @escaping (Swift.String, Swift.String) -> Swift.Void)
  @objc optional func onSDKClose()
}
extension ReadyRemitSDK.ReadyRemit {
  @objc public class TransferRequest : ObjectiveC.NSObject, Swift.Codable {
    @objc final public let dstCountryIso3Code: Swift.String
    @objc final public let dstCurrencyIso3Code: Swift.String
    @objc final public let srcCurrencyIso3Code: Swift.String
    @objc final public let transferMethod: Swift.String
    @objc final public let quoteBy: Swift.String
    @objc final public let amount: Swift.Int
    @objc final public let fee: Swift.Int
    @objc final public let recipientId: Swift.String
    @objc final public let recipientAccountId: Swift.String?
    @objc final public let purposeOfRemittance: Swift.String
    @objc final public let fields: [ReadyRemitSDK.ReadyRemit.RequestField]?
    @objc final public let quoteHistoryId: Swift.String?
    @objc final public let sourceOfFunds: Swift.String?
    @objc public init(dstCountryIso3Code: Swift.String, dstCurrencyIso3Code: Swift.String, srcCurrencyIso3Code: Swift.String, transferMethod: Swift.String, quoteBy: Swift.String, amount: Swift.Int, fee: Swift.Int, recipientId: Swift.String, recipientAccountId: Swift.String?, purposeOfRemittance: Swift.String, fields: [ReadyRemitSDK.ReadyRemit.RequestField]?, quoteHistoryId: Swift.String, sourceOfFunds: Swift.String? = nil)
    @objc public func toJSON() -> Swift.String?
    @objc deinit
    public func encode(to encoder: Swift.Encoder) throws
    required public init(from decoder: Swift.Decoder) throws
  }
  @objc public class RequestField : ObjectiveC.NSObject, Swift.Codable {
    @objc final public let id: Swift.String
    @objc final public let name: Swift.String
    @objc final public let type: Swift.String
    @objc final public let value: Swift.String
    @objc final public let displayText: Swift.String
    @objc public init(id: Swift.String, name: Swift.String, type: Swift.String, value: Swift.String, displayText: Swift.String)
    @objc deinit
    public func encode(to encoder: Swift.Encoder) throws
    required public init(from decoder: Swift.Decoder) throws
  }
}
@_inheritsConvenienceInitializers @objc public class ReadyRemitAppearance : ObjectiveC.NSObject {
  @objc public static let shared: ReadyRemitSDK.ReadyRemitAppearance
  @objc public var colors: ReadyRemitSDK.ReadyRemitColorScheme
  @objc public init(colors: ReadyRemitSDK.ReadyRemitColorScheme)
  @objc public init(styles: Foundation.NSDictionary)
  @objc override dynamic public init()
  @objc deinit
}
extension ReadyRemitSDK.ReadyRemitEnvironment : Swift.Equatable {}
extension ReadyRemitSDK.ReadyRemitEnvironment : Swift.Hashable {}
extension ReadyRemitSDK.ReadyRemitEnvironment : Swift.RawRepresentable {}
